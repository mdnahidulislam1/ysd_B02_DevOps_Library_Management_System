pipeline {
    agent any
    tools {
        maven "Maven-3.9.3"
    }
    triggers{
        pollSCM('H/2 * * * *')
     }

    environment {
        DB_URL = credentials('onPremiseDbUrl')
        DB_USERNAME = credentials('onPremiseUser')
        DB_PASSWORD = credentials('onPremisePass')
        APP_PROPERTIES_PATH = '/var/lib/jenkins/workspace/on-premise-deployment-pipeline/src/main/resources/application.properties'
    }

    stages {
        stage('Git Clone') {
            steps {
                git branch: 'main', credentialsId: 'aws-git', url: 'https://github.com/mdnahidulislam1/ysd_B02_DevOps_Library_Management_System.git'
            }
        }

        stage('Modify application.properties content') {
            steps {
                script {
                    sh """
                    sed -i "s|spring.datasource.url =.*|spring.datasource.url = \${DB_URL}|g" ${APP_PROPERTIES_PATH}
                    sed -i "s|spring.datasource.username =.*|spring.datasource.username = \${DB_USERNAME}|g" ${APP_PROPERTIES_PATH}
                    sed -i "s|spring.datasource.password =.*|spring.datasource.password = \${DB_PASSWORD}|g" ${APP_PROPERTIES_PATH}
                    """
                }
            }
        }

        stage('Maven Build') {
            steps {
                sh 'mvn clean install'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-id', variable: 'SONARQUBE_TOKEN')]) {
                    withSonarQubeEnv('sonarqube8.9') {
                        script {
                            sh "mvn sonar:sonar -Dsonar.login=${SONARQUBE_TOKEN}"
                        }
                    }
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                script {
                    dockerImage = docker.build("nahid003/${JOB_NAME}:${BUILD_ID}")
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                script {
                    sh 'trivy image nahid003/${JOB_NAME}:${BUILD_ID} > trivy.txt'
                }
            }
        }

        stage('Push to Docker Registry') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-key') {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Docker Image Remove') {
            steps {
                sh "docker rmi nahid003/${JOB_NAME}:${BUILD_ID}"
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withKubeConfig(credentialsId: 'kube-cred') {
                        sh 'sed -i "s/TAG/${BUILD_ID}/g" kubernetes-deploy/main.yml'
                        def myqlPodExists = sh(
                            script: 'kubectl get pod -l app=my-mysql -o name',
                            returnStatus: true
                        )
                        def webServerPodtExists = sh(
                            script: 'kubectl get pod -l app=my-webserver -o name',
                            returnStatus: true
                        )
                        if (webServerPodtExists == 0 || myqlPodExists == 0) {
                            try {
                                sh 'kubectl delete -f main.yml'
                            } catch (Exception e) {
                                echo "Error deleting pods: ${e.getMessage()}"
                            }
                        }
                        sh 'kubectl apply -f kubernetes-deploy/main.yml'
                    }
                }
            }
        }
    }

    post {
       success {
            // Slack notification for successful build
            slackSend channel: '#sparklms', color: 'good',
                      message: "Build successful: ${currentBuild.fullDisplayName}"
        }
        failure {
            // Slack notification for failed build
            slackSend channel: '#sparklms', color: 'danger',
                      message: "Build failed: ${currentBuild.fullDisplayName}"
        }

        always {
            // Extend email notification
             script {
                if (currentBuild.result != 'SUCCESS') {
                    emailext body: "Build failed. Please check the console output for more details.\n\nContents of trivy.txt:\n\n${readFile('trivy.txt')}",
                        subject: "Build Failed: ${env.JOB_NAME} - Build #${env.BUILD_NUMBER}",
                        to: "nahidulislam.devskill@gmail.com",
                        replyTo: "nahidulislam.devskill@gmail.com",
                        attachmentsPattern: 'trivy.txt',
                        mimeType: 'text/plain'
                } else {
                    emailext body: "Build successful. You can access the artifacts at: ${env.BUILD_URL}artifact/*zip*/archive.zip",
                        subject: "Build Successful: ${env.JOB_NAME} - Build #${env.BUILD_NUMBER}",
                        to: "nahidulislam.devskill@gmail.com",
                        replyTo: "nahidulislam.devskill@gmail.com",
                        attachmentsPattern: 'trivy.txt',
                        mimeType: 'text/plain'
                }
            }
        }
    }
}
