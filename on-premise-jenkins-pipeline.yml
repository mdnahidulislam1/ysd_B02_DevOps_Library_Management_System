pipeline {
    agent any
    tools{
         maven"Maven-3.9.3"
    }
    // triggers{
    //     pollSCM('H/2 * * * *')
    // }
    stages {
        stage('Git Clone') {
            steps {
                git branch: 'main', credentialsId: 'aws-git', url: 'https://github.com/mdnahidulislam1/ysd_B02_DevOps_Library_Management_System.git'}
        }
        stage('Modify application.properties content') {
            steps {
               script {
                    withCredentials([
                          string(credentialsId: 'onPremiseDbUrl', variable: 'dbUrl'),
                          string(credentialsId: 'onPremiseUser', variable: 'dbUsername'),
                          string(credentialsId: 'onPremisePass', variable: 'dbPassword')
            ]) {
                sh """
                sed -i "s|spring.datasource.url =.*|spring.datasource.url = \${dbUrl}|g" /var/lib/jenkins/workspace/on-premise-deployment-pipeline/src/main/resources/application.properties
                sed -i "s|spring.datasource.username =.*|spring.datasource.username = \${dbUsername}|g" /var/lib/jenkins/workspace/on-premise-deployment-pipeline/src/main/resources/application.properties
                sed -i "s|spring.datasource.password =.*|spring.datasource.password = \${dbPassword}|g" /var/lib/jenkins/workspace/on-premise-deployment-pipeline/src/main/resources/application.properties
                """
            }
          }
       }
     }
        stage('Maven Build') {
             steps {
                  sh 'mvn clean install'
                }
            }
          stage('Docker Image Build') {
            steps {
                script{
                    dockerImage = docker.build("nahid003/${JOB_NAME}:${BUILD_ID}")
                }
            }
        }
        stage('Push to docker') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-key') {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Docker Image Remove') {
            steps {
                sh 'docker rmi nahid003/${JOB_NAME}:${BUILD_ID}'
            }
        }
   
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kube-cred', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                        sh 'sed -i "s/TAG/${BUILD_ID}/g" kubernetes-deploy/main.yml'
                        def myqlPodExists = sh(
                            script: 'kubectl get pod -l app=my-mysql -o name',
                            returnStatus: true
                        )
                        def webServerPodtExists = sh(
                            script: 'kubectl get pod -l app=my-webserver -o name',
                            returnStatus: true
                        )
                        if (webServerPodtExists == 0 || myqlPodExists == 0) {
                            try {
                                sh 'kubectl delete -f main.yml'
                            } catch (Exception e) {
                                echo "Error deleting pods: ${e.getMessage()}"
                            }
                        }
                        
                        sh 'kubectl apply -f kubernetes-deploy/main.yml'
                  }
                }
              }
            }
            
        
    }
    post {
        // always {
        //     echo 'One way or another, I have finished'
        //     deleteDir() 
        // }
        success {
            echo 'I succeeded!'
        }
        unstable {
            echo 'I am unstable :/'
        }
        failure {
            echo 'I failed :('
        }
    }
}
