pipeline {
    agent any
     tools {
        maven "Maven-3.9.3"
    }

    environment {
        DB_URL = credentials('DB_URL')
        DB_USERNAME = credentials('DB_USERNAME')
        DB_PASSWORD = credentials('DB_PASSWORD')
        SSH_KEY = credentials('ec2-user-key')
        EC2_HOST = '34.221.200.56'
        JAR_FILENAME = 'spark-lms-0.0.1-SNAPSHOT.jar'
        WORKSPACE_PATH = "/var/lib/jenkins/workspace/aws-deployment-pipeline"
        JAR_PATH = "$WORKSPACE_PATH/target/$JAR_FILENAME"
    }

    stages {
        stage('Git Clone') {
            steps {
                git branch: 'main', credentialsId: 'aws-git', url: 'https://github.com/mdnahidulislam1/ysd_B02_DevOps_Library_Management_System.git'
            }
        }

        stage('Modify application.properties content') {
            steps {
                script {
                    sh """
                    sed -i "s|spring.datasource.url =.*|spring.datasource.url = \${DB_URL}|g" $WORKSPACE_PATH/src/main/resources/application.properties
                    sed -i "s|spring.datasource.username =.*|spring.datasource.username = \${DB_USERNAME}|g" $WORKSPACE_PATH/src/main/resources/application.properties
                    sed -i "s|spring.datasource.password =.*|spring.datasource.password = \${DB_PASSWORD}|g" $WORKSPACE_PATH/src/main/resources/application.properties
                    """
                }
            }
        }

        stage('Maven Build') {
            steps {
                sh 'mvn clean install'
            }
        }

        stage('SSH to EC2') {
            steps {
                script {
                    def sshCommand = "ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ec2-user@${EC2_HOST}"
                    sh sshCommand
                }
            }
        }

        stage('Copy JAR to EC2') {
            steps {
                script {
                    def scpCommand = "scp -i ${SSH_KEY} ${JAR_PATH} ec2-user@${EC2_HOST}:~/"
                    sh scpCommand
                }
            }
        }

        stage('Deploy project') {
            steps {
                script {
                    def sshDeployCommandTerminate = "ssh -i ${SSH_KEY} ec2-user@${EC2_HOST} 'pkill java'"
                    def sshDeployCommandStart = "ssh -i ${SSH_KEY} ec2-user@${EC2_HOST} 'java -jar ~/${JAR_FILENAME} &> /dev/null &'"
                    //nohup java -jar /home/ec2-user/spark-lms-0.0.1-SNAPSHOT.jar >/dev/null 2>&1 &

                    try {
                        sh returnStatus: true, script: sshDeployCommandTerminate
                        println("Java processes terminated successfully.")

                        sh sshDeployCommandStart
                        println("Java application started successfully.")
                    } catch (Exception e) {
                        println("Failed to deploy the Java application: ${e.getMessage()}")
                    }
                }
            }
        }
    }
}
