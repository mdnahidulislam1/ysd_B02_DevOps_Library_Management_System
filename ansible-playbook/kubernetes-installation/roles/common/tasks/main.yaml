- name: Install vim
  package:
    name: vim
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Stop firewalld
  service:
    name: firewalld
    state: stopped
    enabled: false
  when: ansible_facts['os_family'] == 'RedHat'

- name: Disable firewalld
  service:
    name: firewalld
    enabled: false
  when: ansible_facts['os_family'] == 'RedHat'

- name: Change SELinux enforcing to disabled
  lineinfile:
    path: "{{ selinux_config_file }}"
    line: "SELINUX=disabled"
    regexp: "^SELINUX="
  when: ansible_facts['os_family'] == 'RedHat'

- name: Create k8s.conf file
  copy:
    dest: /etc/modules-load.d/k8s.conf
    content: ""
  when: ansible_facts['os_family'] == 'RedHat'
  become: true

- name: Load kernel modules
  modprobe:
    name: "{{ item }}"
  with_items:
    - overlay
    - br_netfilter
  when: ansible_facts['os_family'] == 'RedHat'

- name: Configure kernel modules on boot
  lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: "{{ item }}"
  with_items:
    - overlay
    - br_netfilter
  when: ansible_facts['os_family'] == 'RedHat'

- name: Configure sysctl settings for Kubernetes
  sysctl:
    name: "{{ item }}"
    value: "1"
    sysctl_file: /etc/sysctl.d/k8s.conf
    state: present
  with_items:
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables
    - net.ipv4.ip_forward
  when: ansible_facts['os_family'] == 'RedHat'

- name: Disable swap
  replace:
    path: /etc/fstab
    regexp: '^(.*swap.*)$'
    replace: '#\1'
  become: true
  when: ansible_facts['os_family'] == 'RedHat'

- name: Turn off swap
  command: swapoff -a
  become: true
  when: ansible_facts['os_family'] == 'RedHat'

- name: Install required packages for Docker
  package:
    name: dnf-utils
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Add Docker repository
  get_url:
    url: https://download.docker.com/linux/centos/docker-ce.repo
    dest: /etc/yum.repos.d/docker-ce.repo
  when: ansible_facts['os_family'] == 'RedHat'

- name: Update package cache
  command: dnf makecache
  when: ansible_facts['os_family'] == 'RedHat'

- name: Install containerd
  package:
    name: containerd.io
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Generate containerd config.toml
  ansible.builtin.command: containerd config default
  register: containerd_config_result
  when: ansible_facts['os_family'] == 'RedHat'

- name: Save containerd config.toml
  ansible.builtin.copy:
    content: "{{ containerd_config_result.stdout }}"
    dest: /etc/containerd/config.toml
    owner: root
    group: root
    mode: '0644'
  when: ansible_facts['os_family'] == 'RedHat'

- name: Create a backup of the containerd configuration file
  ansible.builtin.command:
    cmd: sudo cp /etc/containerd/config.toml /etc/containerd/config.toml.orig
  when: ansible_facts['os_family'] == 'RedHat'

- name: Update SystemdCgroup value in containerd configuration
  ansible.builtin.replace:
    path: /etc/containerd/config.toml
    regexp: '(^\s*SystemdCgroup = )false$'
    replace: '\1true'
  when: ansible_facts['os_family'] == 'RedHat'

- name: Enable and start containerd
  service:
    name: containerd
    enabled: true
    state: started
  when: ansible_facts['os_family'] == 'RedHat'

- name: Reload containerd service
  ansible.builtin.service:
    name: containerd
    state: restarted
  when: ansible_facts['os_family'] == 'RedHat'

- name: Add Kubernetes repository
  copy:
    content: |
      [kubernetes]
      name=Kubernetes
      baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
      enabled=1
      gpgcheck=1
      gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
              https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      exclude=kubelet kubeadm kubectl
    dest: /etc/yum.repos.d/kubernetes.repo
    owner: root
    group: root
    mode: '0644'
  when: ansible_facts['os_family'] == 'RedHat'

- name: Update package cache for Kubernetes
  command: dnf makecache
  when: ansible_facts['os_family'] == 'RedHat'

- name: Install kubelet, kubeadm, and kubectl
  package:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    disable_excludes: kubernetes
  when: ansible_facts['os_family'] == 'RedHat'

- name: Enable and start kubelet
  service:
    name: kubelet
    enabled: true
    state: started
  when: ansible_facts['os_family'] == 'RedHat'