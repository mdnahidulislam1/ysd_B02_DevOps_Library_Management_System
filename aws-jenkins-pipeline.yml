pipeline {
    agent any
     tools {
        maven "Maven-3.9.3"
    }
    triggers{
        pollSCM('H/2 * * * *')
     }
    environment {
        DB_URL = credentials('DB_URL')
        DB_USERNAME = credentials('DB_USERNAME')
        DB_PASSWORD = credentials('DB_PASSWORD')
        SSH_KEY = credentials('ec2-user-key')
        WORKSPACE_PATH = "/var/lib/jenkins/workspace/aws-deployment-pipeline"
    }

    stages {
        stage('Git Clone') {
            steps {
                git branch: 'main', credentialsId: 'aws-git', url: 'https://github.com/mdnahidulislam1/ysd_B02_DevOps_Library_Management_System.git'
            }
        }
        stage('Trivy Scan (Git)') {
          steps {
        // Scan the cloned repository using Trivy
          sh 'trivy fs --severity HIGH,CRITICAL --ignore-unfixed $WORKSPACE_PATH > trivy_git_scan.txt'
           }
        }

        stage('Modify application.properties content') {
            steps {
                script {
                    sh """
                    sed -i "s|spring.datasource.url =.*|spring.datasource.url = \${DB_URL}|g" $WORKSPACE_PATH/src/main/resources/application.properties
                    sed -i "s|spring.datasource.username =.*|spring.datasource.username = \${DB_USERNAME}|g" $WORKSPACE_PATH/src/main/resources/application.properties
                    sed -i "s|spring.datasource.password =.*|spring.datasource.password = \${DB_PASSWORD}|g" $WORKSPACE_PATH/src/main/resources/application.properties
                    """
                }
            }
        }

        stage('Maven Build') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'aws-sonar-id', variable: 'SONARQUBE_TOKEN')]) {
                    withSonarQubeEnv('sonarqube8.9') {
                        script {
                            sh "mvn sonar:sonar -Dsonar.login=${SONARQUBE_TOKEN}"
                        }
                    }
                }
            }
        }
         stage('Deploy Project') {
            steps {
                ansiblePlaybook credentialsId: 'ansible-master-private-key', disableHostKeyChecking: true, installation: 'ansible', inventory: '/etc/ansible/hosts', playbook: "ansible-playbook/java-project-deploy-to-ec2/java-service.yml"
            }
        }
    }
 post {
       success {
            // Slack notification for successful build
            slackSend channel: '#sparklms', color: 'good',
                      message: "Build successful: ${currentBuild.fullDisplayName}"
        }
        failure {
            // Slack notification for failed build
            slackSend channel: '#sparklms', color: 'danger',
                      message: "Build failed: ${currentBuild.fullDisplayName}"
        }

        always {
            // Extend email notification
             script {
                if (currentBuild.result != 'SUCCESS') {
                    emailext body: "Build failed. Please check the console output for more details.",
                        subject: "Build Failed: ${env.JOB_NAME} - Build #${env.BUILD_NUMBER}",
                        to: "nahidulislam.devskill@gmail.com",
                        replyTo: "nahidulislam.devskill@gmail.com",
                        attachmentsPattern: 'trivy_git_scan.txt',
                        mimeType: 'text/plain'
                } else {
                    emailext body: "Build successful. You can access the artifacts at: ${env.BUILD_URL}artifact/*zip*/archive.zip",
                        subject: "Build Successful: ${env.JOB_NAME} - Build #${env.BUILD_NUMBER}",
                        to: "nahidulislam.devskill@gmail.com",
                        replyTo: "nahidulislam.devskill@gmail.com",
                        attachmentsPattern: 'trivy_git_scan.txt',
                        mimeType: 'text/plain'
                }
            }
        }
    }
}
